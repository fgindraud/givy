std::thread::hardware_concurrency ()

Allocator:
- sizeclasses
	- better sizeclass sizes ?

- superpage header
	- new page block manager structure in progress (use indexes)
	- separate in spb_h and spb types

- virtual mapping overhaul (low priority)
	- ranges
	- class that implements setup/map/destroy/cleanup
	- eager (current) version, setup/cleanup=null, map/destroy=mmap/munmap
	- lazy version, setup/cleanup=mmap/munmap gas, map=null, destroy=discard ?
	- beware of Bootstrap::Allocator

- superpage tracker X virtual mapping
	- fix possible data race
		- introduce "ongoing_modification" flag ?

- atomic get_containing_block
	- relaxed ?

- optimize deallocation (Blk)

- refined SPB management:
	- central heap list ? (cache, orphaned blocks, ...)
	- active_spb by page block size list in TLH ? or global unused page block list ?

- atomics:
	- SPT improvements ?
	- owner : release-acquire seems good

Coherence:
- CCI improvements
	- add callback support, and remove our own thread
- add header support

Structure:
- Keep most code in header (especially template stuff, like allocator)
- Finish to inline everything (for safety if using multiple cpp)
- Put network in ccp file ?

GAS startup status:
- At program startup, currently uses malloc/free (non GAS)
	- move to using map_anywhere to allocate spb. will need tlh flushing when switching to GAS mode
- After start of GAS mode, allocates from allocator itself
	- non gas ptrs are still freed with free()
